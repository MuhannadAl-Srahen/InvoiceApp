@page
@model InvoiceApp.Pages.Invoices.IndexModel
@{
}

<h2 class="text-center mb-4 fw-bold text-primary">Invoices</h2>

<div class="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-2">
    <a class="btn btn-success shadow-sm" asp-page="/Invoices/Create">
        <i class="bi bi-plus-lg me-1"></i> New Invoice
    </a>
    <input type="search" id="searchInput" class="form-control ms-auto" style="max-width: 320px;" placeholder="Search invoices..." aria-label="Search invoices" />
</div>

<div class="table-responsive shadow-sm rounded">
    <table class="table table-hover align-middle" id="invoicesTable">
        <thead class="table-light">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Invoice No</th>
                <th scope="col">Status</th>
                <th scope="col">Client</th>
                <th scope="col">Total Price</th>
                <th scope="col">Issue Date</th>
                <th scope="col">Due Date</th>
                <th scope="col" class="text-center">Action</th>
            </tr>
        </thead>

        <tbody>
            @if (Model.invoiceList.Count == 0)
            {
                <tr>
                    <td colspan="8" class="text-center text-muted py-3">
                        No invoices found.
                    </td>
                </tr>
            }
            else
            {
                foreach (var invoice in Model.invoiceList)
                {
                    <tr>
                        <td>@invoice.Id</td>
                        <td>@invoice.Number</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(invoice.Status)">@invoice.Status</span>
                        </td>
                        <td>@invoice.ClinetName</td>
                        <td>@(invoice.Quantity* invoice.UnitPrice)$</td>
                        <td>@invoice.IssueDate</td>
                        <td>@invoice.DueDate</td>
                        <td class="text-center" style="white-space: nowrap;">
                            <a class="btn btn-sm btn-outline-primary me-1" asp-page="/Invoices/Edit" asp-route-id="@invoice.Id">
                                <i class="bi bi-pencil-fill"></i> Edit
                            </a>
                            <button type="button"
                                    class="btn btn-sm btn-outline-danger delete-btn"
                                    data-invoice-id="@invoice.Id"
                                    data-invoice-number="@invoice.Number"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteConfirmModal">
                                <i class="bi bi-trash-fill"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<nav aria-label="Invoice pagination" class="mt-4">
    <ul class="pagination justify-content-center" id="paginationControls"></ul>
</nav>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmLabel"><i class="bi bi-exclamation-triangle-fill me-2"></i>Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete invoice <strong id="modalInvoiceNumber"></strong>?</p>
                <p class="text-danger small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary shadow-sm" data-bs-dismiss="modal">Cancel</button>
                <a id="confirmDeleteBtn" class="btn btn-danger shadow-sm" href="#">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const rowsPerPage = 12;
        let currentPage = 1;

        const table = document.getElementById('invoicesTable');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const searchInput = document.getElementById('searchInput');
        const paginationControls = document.getElementById('paginationControls');

        // Pagination rendering (same as before)
        function renderPagination(totalPages) {
            paginationControls.innerHTML = '';

            const prevLi = document.createElement('li');
            prevLi.className = 'page-item ' + (currentPage === 1 ? 'disabled' : '');
            prevLi.innerHTML = `<a class="page-link" href="#" tabindex="-1" aria-disabled="${currentPage === 1}">Previous</a>`;
            prevLi.addEventListener('click', e => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    filterAndPaginate();
                }
            });
            paginationControls.appendChild(prevLi);

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = 'page-item ' + (i === currentPage ? 'active' : '');
                li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                li.addEventListener('click', e => {
                    e.preventDefault();
                    if (currentPage !== i) {
                        currentPage = i;
                        filterAndPaginate();
                    }
                });
                paginationControls.appendChild(li);
            }

            const nextLi = document.createElement('li');
            nextLi.className = 'page-item ' + (currentPage === totalPages ? 'disabled' : '');
            nextLi.innerHTML = `<a class="page-link" href="#" aria-disabled="${currentPage === totalPages}">Next</a>`;
            nextLi.addEventListener('click', e => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    filterAndPaginate();
                }
            });
            paginationControls.appendChild(nextLi);
        }

        function filterAndPaginate() {
            const searchTerm = searchInput.value.toLowerCase().trim();

            let filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(searchTerm));

            if (filteredRows.length === 0) {
                tbody.innerHTML = `
                    <tr id="noResultsRow">
                        <td colspan="8" class="text-center text-danger fw-bold py-3">No results found.</td>
                    </tr>`;
                paginationControls.innerHTML = '';
                return;
            }

            const noResultsRow = document.getElementById('noResultsRow');
            if (noResultsRow) noResultsRow.remove();

            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
            if (currentPage > totalPages) currentPage = totalPages;
            if (currentPage < 1) currentPage = 1;

            rows.forEach(r => r.style.display = 'none');

            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            filteredRows.slice(startIndex, endIndex).forEach(r => r.style.display = '');

            renderPagination(totalPages);
        }

        searchInput.addEventListener('input', () => {
            currentPage = 1;
            filterAndPaginate();
        });

        filterAndPaginate();

        // Modal Delete Confirmation Logic
        document.addEventListener('DOMContentLoaded', () => {
            const deleteButtons = document.querySelectorAll('.delete-btn');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const modalInvoiceNumber = document.getElementById('modalInvoiceNumber');

            deleteButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    const invoiceId = btn.getAttribute('data-invoice-id');
                    const invoiceNumber = btn.getAttribute('data-invoice-number');
                    modalInvoiceNumber.textContent = invoiceNumber;
                    confirmDeleteBtn.href = `/Invoices/Delete?id=${invoiceId}`;
                });
            });
        });
    </script>
}

@functions {
    private string GetStatusBadgeClass(string status) => status switch
    {
        "Paid" => "bg-success",
        "Pending" => "bg-warning text-dark",
        "Overdue" => "bg-danger",
        _ => "bg-secondary"
    };
}
